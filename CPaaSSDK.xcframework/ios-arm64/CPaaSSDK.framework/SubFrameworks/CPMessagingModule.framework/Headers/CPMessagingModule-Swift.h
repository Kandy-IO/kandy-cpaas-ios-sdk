// Generated by Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
#ifndef CPMESSAGINGMODULE_SWIFT_H
#define CPMESSAGINGMODULE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CPUtilities;
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="CPMessagingModule",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


/// This is an opaque class that gives the caller a means to cancel an activity the application initiated.
SWIFT_CLASS("_TtC17CPMessagingModule16CPActivityHandle")
@interface CPActivityHandle : NSObject
/// Cancel the activity operation.
- (void)cancel;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC17CPMessagingModule14FetchedObjects")
@interface FetchedObjects : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class CPError;
@class FetchResult;
@class FetchOptions;
@class CPOutboundMessage;
@class CPMessage;

/// This is an abstract base class used to access the common functionality and members of a MessageService conversation.
SWIFT_CLASS("_TtC17CPMessagingModule14CPConversation")
@interface CPConversation : FetchedObjects
@property (nonatomic, readonly, copy) NSString * _Nonnull fromAddress;
/// Remote party with which the conversation is made
@property (nonatomic, readonly, copy) NSString * _Nonnull participant;
/// The last text message exchanged between the conversation parties
@property (nonatomic, readonly, copy) NSString * _Nonnull lastText;
/// Timestamp of the first message in this conversation
@property (nonatomic, readonly, copy) NSDate * _Nonnull firstMessageTime;
/// Timestamp of the last message in this conversation
@property (nonatomic, readonly, copy) NSDate * _Nonnull lastMessageTime;
/// Timestamp of the last message received by this party
@property (nonatomic, readonly, copy) NSDate * _Nonnull lastReceivedMessageTime;
/// Timestamp of the most recent fetch of the conversation
@property (nonatomic, readonly, copy) NSDate * _Nonnull lastPullTime;
/// The number of messages exchanged in this conversation
@property (nonatomic, readonly) NSInteger length;
/// The resource url of the conversation
@property (nonatomic, readonly, copy) NSString * _Nonnull resourceUrl;
/// The url of the conversation
@property (nonatomic, readonly, copy) NSString * _Nonnull url;
/// Public interface to fetch messages from the server. This interface is a simplified version for getting the most recent message.
/// \param completion Code block to execute once the fetch has completed.
///
- (void)fetchMessagesWithCompletion:(void (^ _Nonnull)(CPError * _Nullable, FetchResult * _Nullable))completion;
/// Public interface to fetch messages from the server. This interface is a simplified version for getting the most recent message.
/// \param fetchCriteria Criterias to query.
///
/// \param completion Code block to execute once the fetch has completed.
///
- (void)fetchMessagesWithFetchOptions:(FetchOptions * _Nonnull)fetchOptions completion:(void (^ _Nonnull)(CPError * _Nullable, FetchResult * _Nullable))completion;
/// Public interface to delete a single message from the server.
/// This is an abstract method meant to be implemented by classes that derive from Conversation.
/// \param withId MessageID of message to delete.
///
/// \param completion Code block to execute once the delete has completed.
///
- (void)deleteMessageWithResourceUrl:(NSString * _Nonnull)withResourceUrl completion:(void (^ _Nonnull)(CPError * _Nullable))completion;
/// Public interface to delete conversation.
/// \param completion Code block to execute once the delete has completed.
///
- (void)deleteWithCompletion:(void (^ _Nonnull)(CPError * _Nullable))completion;
/// Public method to send a text message.
/// \param withText text for new message to add to this conversation.
///
/// \param completion Code block to execute upon send completion.
///
- (void)sendWithText:(NSString * _Nonnull)withText :(void (^ _Nonnull)(CPError * _Nullable, CPOutboundMessage * _Nullable))completion;
/// Public method to send a message, using a template message.
/// \param message template message to add to this conversation. This can be a newly created message, or an existing inbound or outbound.
///
/// \param completion Code block to execute upon send completion. This block returns the new outbound message created from the template.
///
- (void)sendWithMessage:(CPMessage * _Nonnull)message :(void (^ _Nonnull)(CPError * _Nullable, CPOutboundMessage * _Nullable))completion;
/// Public method overrides default object printing.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class CPIsComposingMessage;
@class CPChatGroupParticipant;
@class CPChatGroup;

/// This class is used to manage an exchange of chat messages between two parties. Create a ChatConversation using the ChatService createConversation(withParticipant:) method
SWIFT_CLASS("_TtC17CPMessagingModule18CPChatConversation")
@interface CPChatConversation : CPConversation
/// The url of the conversation
@property (nonatomic, readonly, copy) NSString * _Nonnull url;
/// The url of the conversation messages
@property (nonatomic, readonly, copy) NSString * _Nonnull messagesUrl;
/// Public method to send a file attachment.
/// \param withFile URL of file attachment.
///
/// \param completion Code block to execute upon send completion.
///
///
/// returns:
/// Opaque activity handle with a cancel method that can be used to cancel the upload operation.
- (CPActivityHandle * _Nonnull)sendWithFile:(NSURL * _Nonnull)withFile progress:(void (^ _Nonnull)(NSInteger, NSInteger))progress completion:(void (^ _Nonnull)(CPError * _Nullable, CPOutboundMessage * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// Public method to send a text with a file attachment.
/// \param text Text message to send.
///
/// \param withFile URL of file attachment.
///
/// \param completion Code block to execute upon send completion.
///
///
/// returns:
/// Opaque activity handle with a cancel method that can be used to cancel the upload operation.
- (CPActivityHandle * _Nonnull)sendWithText:(NSString * _Nonnull)text withFile:(NSURL * _Nonnull)withFile progress:(void (^ _Nonnull)(NSInteger, NSInteger))progress completion:(void (^ _Nonnull)(CPError * _Nullable, CPOutboundMessage * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// Indicate to a participant that a message is being composed.
/// \param active Composition state. Use <code>true</code> for active and <code>false</code> for idle.
///
/// \param refresh Number of seconds since last activity before which the remote should expect a refresh of composing state.
///
/// \param lastActive Epoch timestamp of last activity.
///
/// \param completion Code block to execute upon completion.
///
- (void)composingWithActive:(BOOL)active refresh:(NSUInteger)refresh lastActive:(uint64_t)lastActive :(void (^ _Nonnull)(CPError * _Nullable, CPIsComposingMessage * _Nullable))completion;
/// Indicate to a participant a message has been displayed to the user.
/// \param message The message object that has been displayed to the user.
///
/// \param completion Code block to execute upon send completion. This block returns an error if one occurred or nil.
///
- (void)displayedWithMessage:(CPMessage * _Nonnull)message :(void (^ _Nonnull)(CPError * _Nullable))completion;
/// Interface to fetch messages from the server.
/// Overrides base class Conversation abstract method.
/// \param completion Code block to execute once the fetch has completed.
///
- (void)fetchMessagesWithCompletion:(void (^ _Nonnull)(CPError * _Nullable, FetchResult * _Nullable))completion;
/// Interface to fetch messages from the server.
/// Overrides base class Conversation abstract method.
/// \param fetchOptions Options to pull messages in the conversation.
///
/// \param completion Code block to execute once the fetch has completed.
///
- (void)fetchMessagesWithFetchOptions:(FetchOptions * _Nonnull)fetchOptions completion:(void (^ _Nonnull)(CPError * _Nullable, FetchResult * _Nullable))completion;
/// Public interface to delete a single message from the server.
/// \param withId Unique identifier of the message to delete.
///
/// \param completion Code block to execute once the delete has completed.
///
- (void)deleteMessageWithResourceUrl:(NSString * _Nonnull)withResourceUrl completion:(void (^ _Nonnull)(CPError * _Nullable))completion;
/// Public method used to create a chat group using this chat conversation. New chat group will have the complete chat history and particpants of this conversation.
/// \param name User-friendly name of the chat group
///
/// \param type “open” or “closed” - only “closed” supported in v1
///
/// \param subject Topic of discussion for the chat group
///
/// \param image URL of an image file to be used for the chat group
///
/// \param particpants An array of participant members of the chat group
///
/// \param completion Code block to execute upon completion of chat group creation
///
- (void)extendWithName:(NSString * _Nonnull)name type:(NSString * _Nonnull)type subject:(NSString * _Nullable)subject image:(NSURL * _Nullable)image participants:(NSArray<CPChatGroupParticipant *> * _Nonnull)participants completion:(void (^ _Nonnull)(CPError * _Nullable, CPChatGroup * _Nullable))completion;
@end

@class CPInboundMessage;
@class CPMessageStatus;
@class CPChatGroupInvitation;

/// An application should implement a class using this protocol and assign an instance of the class
/// as the chatService object’s delegate in order to receive notification related to chat messaging.
SWIFT_PROTOCOL("_TtP17CPMessagingModule14CPChatDelegate_")
@protocol CPChatDelegate
/// This delegate method is called when an inbound chat message has been received by the backend.
/// The application may choose to take some action upon receiving a message.
/// \param message The received inbound message.
///
- (void)inboundMessageReceivedWithMessage:(CPInboundMessage * _Nonnull)message;
/// This delegate method is called when the delivery status of an chat message sent by this client changes.
/// The application may choose to take some action upon receiving this status.
/// \param status Message status object describing the conversation and message that have changed.
///
- (void)deliveryStatusChangedWithStatus:(CPMessageStatus * _Nonnull)status;
/// This delegate method is called when any client using the API successfully sends an outbound chat message.
/// This can be used to synchronize the local client with any other activity by another client.
/// The application may choose to take some action upon receiving a message.
/// \param message The outbound message that was sent from some client, not necessarily this application.
///
- (void)outboundMessageSentWithMessage:(CPOutboundMessage * _Nonnull)message;
/// This delegate method is called when a chat message has been started.
/// The remote party must indicate to the server that composition has begun.
/// The message object received will be lacking content since it is not yet composed.
/// The the application may choose to take some action upon receiving a message.
/// \param message An indication that the remote party is composing a message.
///
- (void)isComposingWithMessage:(CPIsComposingMessage * _Nonnull)message;
/// This delegate method is called when an invitation to join a chat group has
/// been received.
/// \param invitation An invitation object that contains a copy of the group to
/// be joined. The invitation object has methods for accept and decline.
///
- (void)groupInvitationReceivedWithInvitation:(CPChatGroupInvitation * _Nonnull)invitation;
/// This delegate method is called when the status of chat group members
/// has been updated.
/// \param participants An array of chat group members that have updated status.
///
- (void)groupParticipantStatusWithParticipants:(NSArray<CPChatGroupParticipant *> * _Nonnull)participants;
/// This delegate method is called when a group chat has ended.
/// \param groupID The groupID of the group chat that ended
///
- (void)groupChatEndedWithGroupID:(NSString * _Nonnull)groupID;
@end

enum CPChatParticipantStatus : NSInteger;

/// This class is used to manage a chat group.
SWIFT_CLASS("_TtC17CPMessagingModule11CPChatGroup")
@interface CPChatGroup : NSObject
/// Server assigned unique identity for this group
@property (nonatomic, readonly, copy) NSString * _Nullable groupID;
/// User-friendly name of the group
@property (nonatomic, readonly, copy) NSString * _Null_unspecified name;
/// Group type is “open” or “closed”. Closed groups require invitation to join.
@property (nonatomic, readonly, copy) NSString * _Null_unspecified type;
/// A URL pointing to a image to be used for the group
@property (nonatomic, copy) NSURL * _Nullable image;
/// The topic of discussion for the group
@property (nonatomic, copy) NSString * _Nullable subject;
/// The members of the chat group
@property (nonatomic, copy) NSSet<CPChatGroupParticipant *> * _Nonnull participants;
/// This variable represents the status of the self participant of this chat group.
@property (nonatomic, readonly) enum CPChatParticipantStatus status;
/// <ul>
///   <li>
///     Returns true if current user is admin of this group conversation.
///   </li>
///   <li>
///   </li>
///   <li>
///     @return true if current user is admin of this group conversation, false otherwise
///   </li>
/// </ul>
@property (nonatomic, readonly) BOOL isAdmin;
/// This method is used to add a participant to this chat group.
/// \param participant The participant to add to this chat group.
///
/// \param completion The code block to execute upon completion of adding the chat group participant.
///
- (void)addWithParticipant:(CPChatGroupParticipant * _Nonnull)participant completion:(void (^ _Nonnull)(CPError * _Nullable))completion;
/// This method is used to remove a participant from this chat group.
/// \param participant The participant to remove from this chat group.
///
/// \param completion The code block to execute upon completion of adding the chat group participant.
///
- (void)removeWithParticipant:(CPChatGroupParticipant * _Nonnull)participant completion:(void (^ _Nonnull)(CPError * _Nullable))completion;
/// This method is used to accept the invitation to join this chat group.
/// \param completion The code block to execute upon completion of accepting the invitation to the chat group.
///
- (void)acceptWithCompletion:(void (^ _Nonnull)(CPError * _Nullable))completion;
/// This method is used to decline the invitation to this chat group.
/// \param completion The code block to execute upon completion of declining the invitation to the chat group.
///
- (void)declineWithCompletion:(void (^ _Nonnull)(CPError * _Nullable))completion;
/// This method is used by a member to leave this chat group. A group owner cannot leave the chat group and should
/// consider deleting the chat group instead.
/// \param completion The code block to execute upon completion of leaving the chat group.
///
- (void)leaveWithCompletion:(void (^ _Nonnull)(CPError * _Nullable))completion;
/// This method is used to update this chat group with new or modified participant information. If an user status
/// changes to Disconnected, that member will be removed from the chat group.
/// \param participant The participant to update within this chat group.
///
- (void)updateWithParticipant:(CPChatGroupParticipant * _Nonnull)participant;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This class represents a chat session among members of a chat group.
SWIFT_CLASS("_TtC17CPMessagingModule23CPChatGroupConversation")
@interface CPChatGroupConversation : CPChatConversation
/// The url of the conversation
@property (nonatomic, readonly, copy) NSString * _Nonnull url;
/// The url of the conversation messages
@property (nonatomic, readonly, copy) NSString * _Nonnull messagesUrl;
/// Indicate to a participant a message has been displayed to the user.
/// \param message The message object that has been displayed to the user.
///
/// \param completion Code block to execute upon send completion. This block returns an error if one occurred or nil.
///
- (void)displayedWithMessage:(CPMessage * _Nonnull)message :(void (^ _Nonnull)(CPError * _Nullable))completion;
@end


/// This class is used to manage a chat group invitation.
SWIFT_CLASS("_TtC17CPMessagingModule21CPChatGroupInvitation")
@interface CPChatGroupInvitation : NSObject
/// The chat group to which the user is being invited
@property (nonatomic, readonly, strong) CPChatGroup * _Null_unspecified group;
/// Helper method to accept the chat group invitation
- (void)acceptWithCompletion:(void (^ _Nonnull)(CPError * _Nullable))completion;
/// Helper method to decline the chat group invitation
- (void)declineWithCompletion:(void (^ _Nonnull)(CPError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This class is used to manage a participant of a chat group.
SWIFT_CLASS("_TtC17CPMessagingModule22CPChatGroupParticipant")
@interface CPChatGroupParticipant : NSObject
/// The service identity of this chat group participant
@property (nonatomic, readonly, copy) NSString * _Null_unspecified address;
/// The connected status of this chat group participant
@property (nonatomic, readonly) enum CPChatParticipantStatus status;
/// Shows if this chat group participant is an administrator in the chat group
@property (nonatomic, readonly) BOOL admin;
/// Constructs a ChatGroupParticipant class.
/// \param address The service identity of the chat group participant.
///
/// \param admin Should this group member be an administrator of the group.
///
- (nonnull instancetype)initWithAddress:(NSString * _Nonnull)address admin:(BOOL)admin OBJC_DESIGNATED_INITIALIZER;
/// This variable shows the server assigned unique identity of the owning chat group.
@property (nonatomic, readonly, copy) NSString * _Nullable groupID;
@property (nonatomic, readonly) NSUInteger hash;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// The status of chat group participants will be either Invited, Connected, or Disconnected.
typedef SWIFT_ENUM(NSInteger, CPChatParticipantStatus, open) {
  CPChatParticipantStatusUnknown = 0,
/// The user has been invited to join a chat group, but has not yet accepted the invitation.
  CPChatParticipantStatusInvited = 1,
/// The user is a member of the chat group.
  CPChatParticipantStatusConnected = 2,
/// The user is no longer a member of the chat group.
  CPChatParticipantStatusDisconnected = 3,
};

@class CPUserInfo;
@class FetchCriteria;

/// This is an abstract base class used to access the common functionality of a messaging service such as SmsService or ChatService.
SWIFT_CLASS("_TtC17CPMessagingModule14MessageService")
@interface MessageService : NSObject
/// User name from which a message is sent
@property (nonatomic, readonly, copy) NSString * _Nonnull fromUser;
- (CPUserInfo * _Nonnull)getUserInfo SWIFT_WARN_UNUSED_RESULT;
/// Sets sender identification information. By default the sender will be anonymous.
/// note:
/// By default the CPaaS service provider configured username will be used for both name and address.
/// \param name Human readable user name to be sent with outbound request.
///
- (void)setSenderWithName:(NSString * _Nonnull)name;
/// Public interface to fetch all conversation objects from the server.
/// \param completion Code block to execute once the fetch has completed.
///
- (void)fetchConversationsWithCompletion:(void (^ _Nonnull)(CPError * _Nullable, FetchResult * _Nullable))completion;
- (void)fetchConversationsWithFetchCriteria:(FetchCriteria * _Nonnull)withFetchCriteria completion:(void (^ _Nonnull)(CPError * _Nullable, FetchResult * _Nullable))completion;
/// Public interface to delete a conversation object from the server.
/// \param conversation Conversation object representing the conversation to delete.
///
/// \param completion Code block to execute once the delete has completed.
///
- (void)deleteWithConversation:(CPConversation * _Nonnull)conversation completion:(void (^ _Nonnull)(CPError * _Nullable))completion;
/// Public interface to create a new message within the conversation.
/// \param withText The text of the message.
///
///
/// returns:
/// A CPOutboundMessage object ready to be sent.
- (CPOutboundMessage * _Nonnull)createMessageWithText:(NSString * _Nonnull)withText SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class CPFilePart;
@class CPServiceInfo;

/// This class is used to manage chat services such as sending and receiving chat messages.
SWIFT_CLASS("_TtC17CPMessagingModule13CPChatService")
@interface CPChatService : MessageService <CPServiceProtocol>
/// An application that needs notifications should implement a ChatDelegate compliant class and set this member as an instance of that class.
@property (nonatomic, strong) id <CPChatDelegate> _Nullable delegate;
/// Public interface to create a chat conversation object derived from the Conversation base class.
/// \param withParticipant URI of remote conversation participant.
///
///
/// returns:
/// Object of type ChatConversation derived from Conversation class.
- (CPConversation * _Nullable)createConversationWithParticipant:(NSString * _Nonnull)withParticipant SWIFT_WARN_UNUSED_RESULT;
/// Public interface to create a chat group conversation object derived from the Conversation base class.
/// \param withGroup URI of remote conversation participant.
///
///
/// returns:
/// Object of type ChatGroupConversation derived from Conversation class.
- (CPConversation * _Nullable)createConversationWithGroup:(CPChatGroup * _Nonnull)withGroup SWIFT_WARN_UNUSED_RESULT;
/// Public method to upload a file to the server.
/// \param withFile URL of file attachment.
///
/// \param progress Code block to call when upload progress changes
///
/// \param completion Code block to execute upon upload completion.
///
///
/// returns:
/// Opaque activity handle with a cancel method that can be used to cancel the upload operation.
- (CPActivityHandle * _Nonnull)uploadWithFile:(NSURL * _Nonnull)withFile progress:(void (^ _Nonnull)(NSInteger, NSInteger))progress completion:(void (^ _Nonnull)(CPError * _Nullable, CPFilePart * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// Returns MIME type of the given file.
/// \param file File URL
///
///
/// returns:
/// MIME Type
- (NSString * _Nonnull)mimeTypeForFile:(NSURL * _Nonnull)file SWIFT_WARN_UNUSED_RESULT;
/// Public method to download a file from the server.
/// \param fromUrl URL of remote file.
///
/// \param toFile URL of local file destination.
///
/// \param progress Code block to call when download progress changes.
///
/// \param completion Code block to execute upon download completion.
///
- (CPActivityHandle * _Nonnull)downloadFromUrl:(NSURL * _Nonnull)fromUrl toFile:(NSURL * _Nonnull)toFile progress:(void (^ _Nonnull)(NSInteger, NSInteger))progress completion:(void (^ _Nonnull)(CPError * _Nullable, NSURL * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// Public interface to fetch only group conversation objects from the server.
/// \param completion Code block to execute once the fetch has completed.
///
- (void)fetchGroupConversationsWithCompletion:(void (^ _Nonnull)(CPError * _Nullable, FetchResult * _Nullable))completion;
/// Public interface to fetch only one-to-one conversation objects from the server.
/// \param completion Code block to execute once the fetch has completed.
///
- (void)fetchOneToOneConversationsWithCompletion:(void (^ _Nonnull)(CPError * _Nullable, FetchResult * _Nullable))completion;
/// Public interface to fetch one conversation object from the server.
/// This would be used when refreshing a conversation after receiving a conversation:change event.
/// \param withGroupID Group key to be used for getting the conversation.
///
/// \param completion Code block to execute once the fetch has completed.
///
- (void)fetchConversationWithGroupID:(NSString * _Nonnull)withGroupID completion:(void (^ _Nonnull)(CPError * _Nullable, FetchResult * _Nullable))completion;
/// Public interface to fetch one conversation object from the server.
/// This would be used when refreshing a conversation after receiving a conversation:change event.
/// \param withParticipant Participant key to be used for getting the conversation.
///
/// \param completion Code block to execute once the fetch has completed.
///
- (void)fetchConversationWithParticipant:(NSString * _Nonnull)withParticipant completion:(void (^ _Nonnull)(CPError * _Nullable, FetchResult * _Nullable))completion;
/// Public interface to delete a conversation object from the server.
/// \param conversation Conversation object representing the conversation to delete.
///
/// \param completion Code block to execute once the delete has completed.
///
- (void)deleteWithConversation:(CPConversation * _Nonnull)conversation completion:(void (^ _Nonnull)(CPError * _Nullable))completion;
/// Delegate method to get a service’s information
///
/// returns:
/// service information object with service type and preferences.
- (CPServiceInfo * _Nonnull)serviceInfo SWIFT_WARN_UNUSED_RESULT;
/// Delegate method to get a list of notfications the service expects
///
/// returns:
/// list of notification names. These should match what is returned by subscribe() in completion callback.
- (NSArray<NSString *> * _Nonnull)notifications SWIFT_WARN_UNUSED_RESULT;
/// Delegate method to subscribe for notifications from a remote channel
/// \param channelID The channel on which to subscribe for notifications.
///
/// \param completion Code block to execute upon subscription completion.
///
- (void)subscribeWithChannelID:(NSString * _Nonnull)channelID completion:(void (^ _Nonnull)(NSString * _Nonnull, CPError * _Nullable))completion;
/// Delegate method to unsubscribe for notifications
/// \param channelID The channel from which to unsubscribe for notifications.
///
/// \param completion Code block to execute upon unsubscription completion.
///
- (void)unsubscribeWithChannelID:(NSString * _Nonnull)channelID completion:(void (^ _Nonnull)(CPError * _Nullable))completion;
/// Public method to create a chat group object.
/// \param name User-friendly name of the chat group
///
/// \param type “open” or “closed” - only “closed” supported in v1
///
/// \param subject Topic of discussion for the chat group
///
/// \param image URL of an image file to be used for the chat group
///
/// \param particpants An array of participant members of the chat group
///
/// \param completion Code block to execute upon completion of chat group creation
///
- (void)createChatGroupWithName:(NSString * _Nonnull)name type:(NSString * _Nonnull)type subject:(NSString * _Nullable)subject image:(NSURL * _Nullable)image participants:(NSArray<CPChatGroupParticipant *> * _Nonnull)participants completion:(void (^ _Nonnull)(CPError * _Nullable, CPChatGroup * _Nullable))completion;
/// Public method to update a chat group object.
/// \param groupID Unique identifier assigned by the server to the chat group
///
/// \param name User-friendly name of the chat group
///
/// \param subject Topic of discussion for the chat group
///
/// \param image URL of an image file to be used for the chat group
///
/// \param completion Code block to execute upon completion of chat group update
///
- (void)updateChatGroupPropertiesWithGroupID:(NSString * _Nonnull)groupID name:(NSString * _Nonnull)name subject:(NSString * _Nullable)subject image:(NSString * _Nullable)image :(void (^ _Nonnull)(CPError * _Nullable))completion;
/// Public method used to delete a chat group using its unique identifier
/// \param groupID Unique identifier assigned by the server to the chat group
///
/// \param completion Code block to call upon completion of the delete operation
///
- (void)deleteChatGroupWithGroupID:(NSString * _Nonnull)groupID :(void (^ _Nonnull)(CPError * _Nullable))completion;
/// Public method used to fetch all chat group objects from the server
/// \param completion Code block to call up completion of the fetch operation
///
- (void)fetchAllChatGroupsWithCompletion:(void (^ _Nonnull)(CPError * _Nullable, NSArray<CPChatGroup *> * _Nullable))completion;
/// Public method used to fetch a particular chat group object from the server
/// \param withKey Unique server-assigned identifier
///
/// \param completion Code block to call up completion of the fetch operation
///
- (void)fetchChatGroupWithKey:(NSString * _Nonnull)withKey completion:(void (^ _Nonnull)(CPError * _Nullable, CPChatGroup * _Nullable))completion;
/// Method which is can be used to change a group participant’s admin role
/// \param status admin role status as bool
///
/// \param groupID the group ID which participant exists
///
/// \param forParticipant the participant’s ID
///
/// \param completion Code block to execute upon completion of group admin role change
///
- (void)changeGroupAdminRoleWithStatus:(BOOL)status groupID:(NSString * _Nonnull)groupID forParticipant:(NSString * _Nonnull)forParticipant :(void (^ _Nonnull)(CPError * _Nullable))completion;
@end



/// Base class for all message part types.
SWIFT_CLASS("_TtC17CPMessagingModule13CPMessagePart")
@interface CPMessagePart : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class CPThumbnailPart;

/// Represents a file part of a message.
SWIFT_CLASS("_TtC17CPMessagingModule10CPFilePart")
@interface CPFilePart : CPMessagePart
/// link to external server where file is housed
@property (nonatomic, readonly, copy) NSString * _Nonnull link;
/// Content-Type of the attachment
@property (nonatomic, readonly, copy) NSString * _Nonnull contentType;
/// file identifier used for sending message
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// size of the file
@property (nonatomic, readonly) NSInteger size;
/// name of the file
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// thumbnail representation of the file
@property (nonatomic, readonly, strong) CPThumbnailPart * _Nullable thumbnail;
/// Initializes the FilePart with file attachment details.
/// \param name Name of the file attachment.
///
/// \param link URL link to download the file.
///
/// \param size Size of the file attachment in bytes.
///
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name link:(NSString * _Nonnull)link size:(NSInteger)size OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Abstract base class for accessing common functionality and members of CPInboundMessage and CPOutboundMessage
SWIFT_CLASS("_TtC17CPMessagingModule9CPMessage")
@interface CPMessage : FetchedObjects
/// Unique message identifier
@property (nonatomic, readonly, copy) NSString * _Nonnull messageId;
/// Time of creation of the message
@property (nonatomic, readonly, copy) NSDate * _Nonnull timestamp;
/// Sender of the message
@property (nonatomic, readonly, copy) NSString * _Nonnull sender;
/// Recipient of of the message
@property (nonatomic, readonly, copy) NSString * _Nonnull destination;
/// Delivery status of the message
@property (nonatomic, readonly) enum MessageDeliveryStatus status;
/// Conversation type sms, chat, or group
@property (nonatomic, readonly) enum MessageSessionType conversationType;
/// Delivery status for group members
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable groupStatus;
/// The resource url of the conversation
@property (nonatomic, readonly, copy) NSString * _Nonnull resourceUrl;
/// Parts of the message. These can be text, file, and json parts.
@property (nonatomic, readonly, copy) NSArray<CPMessagePart *> * _Nonnull parts;
/// Read-only interface to get the text part of a message, or empty string if there is no text part
@property (nonatomic, readonly, copy) NSString * _Nonnull text;
/// Public method used to update the internal status of group chat messages
/// \param withStatus Message status object used to apply changes to the group
///
- (void)updateWithStatus:(CPMessageStatus * _Nonnull)withStatus;
/// Read-only interface to get the files part of a message.
@property (nonatomic, readonly, copy) NSArray<CPFilePart *> * _Nonnull files;
/// Unique identifier by which a conversation may be selected. This may be different depending on conversation type
@property (nonatomic, readonly, copy) NSString * _Nonnull conversationID;
/// Public method for adding file parts to the message.
/// \param file FilePart to add to the message
///
- (void)addPartWithFile:(CPFilePart * _Nonnull)file;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents a received message.
SWIFT_CLASS("_TtC17CPMessagingModule16CPInboundMessage")
@interface CPInboundMessage : CPMessage
/// Public method overrides default object printing.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull conversationID;
@end


/// Class describing an indication that a remote party is composing a message.
SWIFT_CLASS("_TtC17CPMessagingModule20CPIsComposingMessage")
@interface CPIsComposingMessage : NSObject
/// User ID of party that sent the indication.
@property (nonatomic, readonly, copy) NSString * _Nonnull sender;
/// User ID of party to receive the indication.
@property (nonatomic, readonly, copy) NSString * _Nonnull destination;
/// Conversation type sms, chat, or group
@property (nonatomic) enum MessageSessionType conversationType;
/// State of composition <code>true</code> for active and <code>false</code> for idle.
@property (nonatomic, readonly) BOOL active;
/// Timestamp of last composition activity.
@property (nonatomic, readonly, copy) NSDate * _Nonnull lastActiveTime;
/// Expected refresh interval of composing indication.
@property (nonatomic, readonly) NSUInteger refresh;
/// Inbound or outbound direction of indication.
@property (nonatomic, readonly) enum MessageType direction;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// The unique identifier of this conversation as stored on the server
@property (nonatomic, readonly, copy) NSString * _Nonnull conversationID;
@end




/// Used for presenting the application with message status notification information.
SWIFT_CLASS("_TtC17CPMessagingModule15CPMessageStatus")
@interface CPMessageStatus : NSObject
/// The new status of the message
@property (nonatomic, readonly) enum MessageDeliveryStatus status;
/// The participant with which the message is shared. This can be used to identify the conversation to which this notification applies.
@property (nonatomic, readonly, copy) NSString * _Nonnull participant;
@property (nonatomic) enum MessageSessionType conversationType;
/// The unique message identifier. This can be used to identify which message has changed.
@property (nonatomic, readonly, copy) NSString * _Nonnull messageId;
/// The local address used when sending the message
@property (nonatomic, readonly, copy) NSString * _Nonnull sender;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class CPTextPart;

/// Represents a sent message.
SWIFT_CLASS("_TtC17CPMessagingModule17CPOutboundMessage")
@interface CPOutboundMessage : CPMessage
/// Public method for adding text parts to the message.
/// \param text TextPart to add to the message
///
- (void)addPartWithText:(CPTextPart * _Nonnull)text;
/// Public method overrides default object printing.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// An application should implement a class using this protocol and assign an instance of the class
/// as the smsService object’s delegate in order to receive notification related to SMS messaging.
SWIFT_PROTOCOL("_TtP17CPMessagingModule13CPSmsDelegate_")
@protocol CPSmsDelegate
/// This delegate method is called when an inbound SMS message has been received by the backend.
/// The application may choose to take some action upon receiving a message.
/// \param message The received inbound message.
///
- (void)inboundMessageReceivedWithMessage:(CPInboundMessage * _Nonnull)message;
/// This delegate method is called when the delivery status of an SMS message sent by this client changes.
/// The application may choose to take some action upon receiving a status update.
/// \param status Message status object describing the conversation and message that have changed.
///
- (void)deliveryStatusChangedWithStatus:(CPMessageStatus * _Nonnull)status;
/// This delegate method is called when any client using the API successfully sends an outbound SMS message.
/// This can be used to synchronize the local client with any other activity by another client.
/// The application may choose to take some action upon receiving a message.
/// \param message The outbound message that was sent from some client, not necessarily this application.
///
- (void)outboundMessageSentWithMessage:(CPOutboundMessage * _Nonnull)message;
@end


/// This class is used to manage SMS services such as sending and receiving SMS messages.
SWIFT_CLASS("_TtC17CPMessagingModule12CPSmsService")
@interface CPSmsService : MessageService <CPServiceProtocol>
/// Returns Sms DID address list.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull localAddressList;
/// An application that needs notifications should implement an SmsDelegate compliant class and set this member as an instance of that class.
@property (nonatomic, strong) id <CPSmsDelegate> _Nullable delegate;
/// Public interface to create an SMS conversation object derived from the Conversation base class.
/// \param fromAddress The address from which this message should originate.
///
/// \param withParticipant SIP URI of remote conversation participant.
///
///
/// returns:
/// Object of type SmsConversation derived from Conversation class.
- (CPConversation * _Nullable)createConversationFromAddress:(NSString * _Nonnull)fromAddress withParticipant:(NSString * _Nonnull)withParticipant SWIFT_WARN_UNUSED_RESULT;
/// Public interface to fetch conversations between remote address and all local addresses of current user.
/// \param withParticipant SIP URI of remote conversation participant.
///
///
/// returns:
/// Object of type SmsConversations derived from Conversation class.
- (void)fetchConversationsWithFetchCriteria:(FetchCriteria * _Nonnull)withFetchCriteria completion:(void (^ _Nonnull)(CPError * _Nullable, FetchResult * _Nullable))completion;
/// Delegate method to get a service’s information
///
/// returns:
/// service information object with service type and preferences.
- (CPServiceInfo * _Nonnull)serviceInfo SWIFT_WARN_UNUSED_RESULT;
/// Delegate method to get a list of notfications the service expects
///
/// returns:
/// list of notification names. These should match what is returned by subscribe() in completion callback.
- (NSArray<NSString *> * _Nonnull)notifications SWIFT_WARN_UNUSED_RESULT;
/// Delegate method to subscribe for notifications from a remote channel
/// \param channelID The channel on which to subscribe for notifications.
///
/// \param completion Code block to execute upon subscription completion.
///
- (void)subscribeWithChannelID:(NSString * _Nonnull)channelID completion:(void (^ _Nonnull)(NSString * _Nonnull, CPError * _Nullable))completion;
/// Delegate method to unsubscribe for notifications
/// \param channelID The channel from which to unsubscribe for notifications.
///
/// \param completion Code block to execute upon subscription completion.
///
- (void)unsubscribeWithChannelID:(NSString * _Nonnull)channelID completion:(void (^ _Nonnull)(CPError * _Nullable))completion;
@end


/// Represents the text part of a message.
SWIFT_CLASS("_TtC17CPMessagingModule10CPTextPart")
@interface CPTextPart : CPMessagePart
/// Text of the message
@property (nonatomic, readonly, copy) NSString * _Nonnull text;
/// Initializes the object with some text.
/// \param withText Text message.
///
- (nonnull instancetype)initWithText:(NSString * _Nonnull)withText OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents the Thumbnail part of a message.
SWIFT_CLASS("_TtC17CPMessagingModule15CPThumbnailPart")
@interface CPThumbnailPart : NSObject
/// content type of the thumbnail
@property (nonatomic, readonly) enum MessageContentType contentType;
/// link to external server where thumbnail file is housed
@property (nonatomic, readonly, copy) NSString * _Nonnull link;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC17CPMessagingModule13FetchCriteria")
@interface FetchCriteria : NSObject
@property (nonatomic, copy) NSString * _Nullable localAddress;
@property (nonatomic, copy) NSString * _Nullable participant;
@property (nonatomic, strong) FetchOptions * _Nullable fetchOptions;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17CPMessagingModule12FetchOptions")
@interface FetchOptions : NSObject
@property (nonatomic) NSInteger max;
@property (nonatomic, copy) NSString * _Nonnull next;
@property (nonatomic) long long lastMessageTime;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17CPMessagingModule11FetchResult")
@interface FetchResult : NSObject
@property (nonatomic) BOOL hasNext;
@property (nonatomic, copy) NSArray<FetchedObjects *> * _Nullable result;
- (void)getNextWithCompletion:(void (^ _Nonnull)(CPError * _Nullable, FetchResult * _Nullable))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
