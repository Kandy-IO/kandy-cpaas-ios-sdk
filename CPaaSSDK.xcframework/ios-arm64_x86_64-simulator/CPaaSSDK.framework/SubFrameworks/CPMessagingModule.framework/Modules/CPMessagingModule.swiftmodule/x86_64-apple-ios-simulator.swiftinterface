// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name CPMessagingModule
import CPUtilities
import Foundation
import MobileCoreServices
import NotificationEngine
import CPUtilities.Private
import RestManager
import Swift
public typealias ComposingCompletionBlock = (CPUtilities.CPError?, CPMessagingModule.CPIsComposingMessage?) -> ()
@_hasMissingDesignatedInitializers @objc public class CPChatConversation : CPMessagingModule.CPConversation {
  @objc override public var url: Swift.String {
    @objc get
  }
  @objc public var messagesUrl: Swift.String {
    @objc get
  }
  @objc public func send(withFile: Foundation.URL, progress: @escaping RestManager.UploadProgressBlock, completion: @escaping CPMessagingModule.SendCompletionBlock) -> CPMessagingModule.CPActivityHandle
  @objc public func send(text: Swift.String, withFile: Foundation.URL, progress: @escaping RestManager.UploadProgressBlock, completion: @escaping CPMessagingModule.SendCompletionBlock) -> CPMessagingModule.CPActivityHandle
  @objc public func composing(active: Swift.Bool, refresh: Swift.UInt, lastActive: Swift.UInt64, _ completion: @escaping CPMessagingModule.ComposingCompletionBlock)
  @objc public func displayed(message: CPMessagingModule.CPMessage, _ completion: @escaping CPUtilities.ErrorCompletionBlock)
  @objc override public func fetchMessages(completion: @escaping CPMessagingModule.FetchBlock)
  @objc override public func fetchMessages(fetchOptions: CPMessagingModule.FetchOptions, completion: @escaping CPMessagingModule.FetchBlock)
  @objc override public func deleteMessage(withResourceUrl: Swift.String, completion: @escaping CPUtilities.DeleteCompletionBlock)
  @objc public func extend(name: Swift.String, type: Swift.String, subject: Swift.String? = nil, image: Foundation.URL? = nil, participants: [CPMessagingModule.CPChatGroupParticipant], completion: @escaping CPMessagingModule.CreateChatGroupBlock)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class CPChatGroupConversation : CPMessagingModule.CPChatConversation {
  @objc override public var url: Swift.String {
    @objc get
  }
  @objc override public var messagesUrl: Swift.String {
    @objc get
  }
  @objc override public func displayed(message: CPMessagingModule.CPMessage, _ completion: @escaping CPUtilities.ErrorCompletionBlock)
  @objc deinit
}
@objc public enum CPChatParticipantStatus : Swift.Int, Swift.RawRepresentable {
  public typealias RawValue = Swift.String
  case Unknown
  case Invited
  case Connected
  case Disconnected
  public var rawValue: CPMessagingModule.CPChatParticipantStatus.RawValue {
    get
  }
  public init(rawValue: CPMessagingModule.CPChatParticipantStatus.RawValue)
}
@_hasMissingDesignatedInitializers @objc public class CPChatGroupParticipant : ObjectiveC.NSObject {
  @objc final public let address: Swift.String!
  @objc public var status: CPMessagingModule.CPChatParticipantStatus {
    get
  }
  @objc final public let admin: Swift.Bool
  @objc public init(address: Swift.String, admin: Swift.Bool = false)
  @objc public var groupID: Swift.String? {
    @objc get
  }
  @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
  @objc override dynamic public init()
}
public typealias CreateChatGroupBlock = (CPUtilities.CPError?, CPMessagingModule.CPChatGroup?) -> ()
public typealias FetchAllChatGroupsBlock = (CPUtilities.CPError?, [CPMessagingModule.CPChatGroup]?) -> ()
public typealias FetchChatGroupBlock = (CPUtilities.CPError?, CPMessagingModule.CPChatGroup?) -> ()
@_hasMissingDesignatedInitializers @objc public class CPChatGroup : ObjectiveC.NSObject {
  @objc public var groupID: Swift.String? {
    get
  }
  @objc final public let name: Swift.String!
  @objc final public let type: Swift.String!
  @objc public var image: Foundation.URL?
  @objc public var subject: Swift.String?
  @objc public var participants: Swift.Set<CPMessagingModule.CPChatGroupParticipant>
  @objc public var status: CPMessagingModule.CPChatParticipantStatus {
    @objc get
  }
  @objc public var isAdmin: Swift.Bool {
    @objc get
  }
  @objc public func add(participant: CPMessagingModule.CPChatGroupParticipant, completion: @escaping CPUtilities.ErrorCompletionBlock)
  @objc public func remove(participant: CPMessagingModule.CPChatGroupParticipant, completion: @escaping CPUtilities.ErrorCompletionBlock)
  @objc public func accept(completion: @escaping CPUtilities.ErrorCompletionBlock)
  @objc public func decline(completion: @escaping CPUtilities.ErrorCompletionBlock)
  @objc public func leave(completion: @escaping CPUtilities.ErrorCompletionBlock)
  @objc public func updateWith(participant: CPMessagingModule.CPChatGroupParticipant)
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class CPChatGroupInvitation : ObjectiveC.NSObject {
  @objc final public let group: CPMessagingModule.CPChatGroup!
  @objc public func accept(completion: @escaping CPUtilities.ErrorCompletionBlock)
  @objc public func decline(completion: @escaping CPUtilities.ErrorCompletionBlock)
  @objc deinit
  @objc override dynamic public init()
}
public typealias FetchBlock = (CPUtilities.CPError?, CPMessagingModule.FetchResult?) -> ()
@_inheritsConvenienceInitializers @objc public class FetchOptions : ObjectiveC.NSObject {
  @objc public var max: Swift.Int
  @objc public var next: Swift.String
  @objc public var lastMessageTime: Swift.CLongLong
  public var isNew: Swift.Bool?
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objc public class FetchCriteria : ObjectiveC.NSObject {
  @objc public var localAddress: Swift.String?
  @objc public var participant: Swift.String?
  @objc public var fetchOptions: CPMessagingModule.FetchOptions?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class FetchedObjects : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class FetchResult : ObjectiveC.NSObject {
  @objc public var hasNext: Swift.Bool
  @objc public var result: [CPMessagingModule.FetchedObjects]?
  @objc public func getNext(completion: @escaping CPMessagingModule.FetchBlock)
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class MessageService : ObjectiveC.NSObject {
  @objc public var fromUser: Swift.String {
    @objc get
  }
  @objc public func getUserInfo() -> CPUtilities.CPUserInfo
  @objc public func setSender(name: Swift.String)
  @objc public func fetchConversations(completion: @escaping CPMessagingModule.FetchBlock)
  @objc public func fetchConversations(withFetchCriteria: CPMessagingModule.FetchCriteria, completion: @escaping CPMessagingModule.FetchBlock)
  @objc public func delete(conversation: CPMessagingModule.CPConversation, completion: @escaping CPUtilities.DeleteCompletionBlock)
  @objc public func createMessage(withText: Swift.String) -> CPMessagingModule.CPOutboundMessage
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class CPIsComposingMessage : ObjectiveC.NSObject {
  @objc public var sender: Swift.String {
    get
  }
  @objc public var destination: Swift.String {
    get
  }
  @objc public var conversationType: CPUtilities.MessageSessionType
  @objc public var active: Swift.Bool {
    get
  }
  @objc public var lastActiveTime: Foundation.Date {
    get
  }
  @objc public var refresh: Swift.UInt {
    get
  }
  @objc public var direction: CPUtilities.MessageType {
    get
  }
  @objc public var conversationID: Swift.String {
    @objc get
  }
  @objc deinit
}
public typealias UploadCompletionBlock = (CPUtilities.CPError?, CPMessagingModule.CPFilePart?) -> ()
public typealias DownloadCompletionBlock = (CPUtilities.CPError?, Foundation.URL?) -> ()
@_hasMissingDesignatedInitializers @objc public class CPActivityHandle : ObjectiveC.NSObject {
  @objc public func cancel()
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers @objc public class CPChatService : CPMessagingModule.MessageService, CPUtilities.CPServiceProtocol {
  @objc public var delegate: CPMessagingModule.CPChatDelegate?
  public init(userInfo: CPUtilities.CPUserInfo, info: CPUtilities.CPServiceInfo)
  @objc public func createConversation(withParticipant: Swift.String) -> CPMessagingModule.CPConversation?
  @objc public func createConversation(withGroup: CPMessagingModule.CPChatGroup) -> CPMessagingModule.CPConversation?
  @objc public func upload(withFile: Foundation.URL, progress: @escaping RestManager.UploadProgressBlock, completion: @escaping CPMessagingModule.UploadCompletionBlock) -> CPMessagingModule.CPActivityHandle
  @objc public func mimeTypeFor(file: Foundation.URL) -> Swift.String
  @objc public func download(fromUrl: Foundation.URL, toFile: Foundation.URL, progress: @escaping RestManager.DownloadProgressBlock, completion: @escaping CPMessagingModule.DownloadCompletionBlock) -> CPMessagingModule.CPActivityHandle
  @objc public func fetchGroupConversations(completion: @escaping CPMessagingModule.FetchBlock)
  @objc public func fetchOneToOneConversations(completion: @escaping CPMessagingModule.FetchBlock)
  @objc public func fetchConversation(withGroupID: Swift.String, completion: @escaping CPMessagingModule.FetchBlock)
  @objc public func fetchConversation(withParticipant: Swift.String, completion: @escaping CPMessagingModule.FetchBlock)
  @objc override public func delete(conversation: CPMessagingModule.CPConversation, completion: @escaping CPUtilities.DeleteCompletionBlock)
  @objc public func serviceInfo() -> CPUtilities.CPServiceInfo
  @objc public func notifications() -> [Swift.String]
  @objc public func subscribe(channelID: Swift.String, completion: @escaping CPUtilities.SubscribeCompletion)
  @objc public func unsubscribe(channelID: Swift.String, completion: @escaping CPUtilities.UnsubscribeCompletion)
  @objc public func createChatGroup(name: Swift.String, type: Swift.String, subject: Swift.String? = nil, image: Foundation.URL? = nil, participants: [CPMessagingModule.CPChatGroupParticipant], completion: @escaping CPMessagingModule.CreateChatGroupBlock)
  @objc public func updateChatGroupProperties(groupID: Swift.String, name: Swift.String, subject: Swift.String? = nil, image: Swift.String? = nil, _ completion: @escaping CPUtilities.ErrorCompletionBlock)
  @objc public func deleteChatGroup(groupID: Swift.String, _ completion: @escaping CPUtilities.DeleteCompletionBlock)
  @objc public func fetchAllChatGroups(completion: @escaping CPMessagingModule.FetchAllChatGroupsBlock)
  @objc public func fetchChatGroup(withKey: Swift.String, completion: @escaping CPMessagingModule.FetchChatGroupBlock)
  @objc public func changeGroupAdminRole(status: Swift.Bool, groupID: Swift.String, forParticipant: Swift.String, _ completion: @escaping CPUtilities.ErrorCompletionBlock)
  @objc deinit
}
@objc public protocol CPChatDelegate {
  @objc func inboundMessageReceived(message: CPMessagingModule.CPInboundMessage)
  @objc func deliveryStatusChanged(status: CPMessagingModule.CPMessageStatus)
  @objc func outboundMessageSent(message: CPMessagingModule.CPOutboundMessage)
  @objc func isComposing(message: CPMessagingModule.CPIsComposingMessage)
  @objc func groupInvitationReceived(invitation: CPMessagingModule.CPChatGroupInvitation)
  @objc func groupParticipantStatus(participants: [CPMessagingModule.CPChatGroupParticipant])
  @objc func groupChatEnded(groupID: Swift.String)
}
@_hasMissingDesignatedInitializers @objc public class CPSmsService : CPMessagingModule.MessageService, CPUtilities.CPServiceProtocol {
  @objc public var localAddressList: [Swift.String] {
    get
  }
  @objc public var delegate: CPMessagingModule.CPSmsDelegate?
  public init(userInfo: CPUtilities.CPUserInfo, info: CPUtilities.CPServiceInfo)
  @objc public func createConversation(fromAddress: Swift.String, withParticipant: Swift.String) -> CPMessagingModule.CPConversation?
  @objc override public func fetchConversations(withFetchCriteria: CPMessagingModule.FetchCriteria, completion: @escaping CPMessagingModule.FetchBlock)
  @objc public func serviceInfo() -> CPUtilities.CPServiceInfo
  @objc public func notifications() -> [Swift.String]
  @objc public func subscribe(channelID: Swift.String, completion: @escaping CPUtilities.SubscribeCompletion)
  @objc public func unsubscribe(channelID: Swift.String, completion: @escaping CPUtilities.UnsubscribeCompletion)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class CPMessagePart : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc public class CPTextPart : CPMessagingModule.CPMessagePart {
  @objc public var text: Swift.String {
    get
  }
  @objc public init(withText: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class CPThumbnailPart : ObjectiveC.NSObject {
  @objc public var contentType: CPUtilities.MessageContentType {
    get
  }
  @objc public var link: Swift.String {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc public class CPFilePart : CPMessagingModule.CPMessagePart {
  @objc public var link: Swift.String {
    get
  }
  @objc public var contentType: Swift.String {
    get
  }
  @objc public var id: Swift.String {
    get
  }
  @objc public var size: Swift.Int {
    get
  }
  @objc public var name: Swift.String {
    get
  }
  @objc public var thumbnail: CPMessagingModule.CPThumbnailPart? {
    get
  }
  @objc public init(name: Swift.String, link: Swift.String, size: Swift.Int)
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class CPMessageStatus : ObjectiveC.NSObject {
  @objc final public let status: CPUtilities.MessageDeliveryStatus
  @objc public var participant: Swift.String {
    get
  }
  @objc public var conversationType: CPUtilities.MessageSessionType
  @objc public var messageId: Swift.String {
    get
  }
  @objc final public let sender: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class CPMessage : CPMessagingModule.FetchedObjects {
  @objc public var messageId: Swift.String {
    get
  }
  @objc public var timestamp: Foundation.Date {
    get
  }
  @objc public var sender: Swift.String {
    get
  }
  @objc public var destination: Swift.String {
    get
  }
  @objc public var status: CPUtilities.MessageDeliveryStatus {
    get
  }
  @objc public var conversationType: CPUtilities.MessageSessionType {
    get
  }
  @objc public var groupStatus: [Swift.String : Swift.String]? {
    get
  }
  @objc public var resourceUrl: Swift.String {
    get
  }
  @objc public var parts: [CPMessagingModule.CPMessagePart] {
    get
  }
  @objc public var text: Swift.String {
    @objc get
  }
  @objc public func update(withStatus: CPMessagingModule.CPMessageStatus)
  @objc public var files: [CPMessagingModule.CPFilePart] {
    @objc get
  }
  @objc public var conversationID: Swift.String {
    @objc get
  }
  @objc public func addPart(file: CPMessagingModule.CPFilePart)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class CPInboundMessage : CPMessagingModule.CPMessage {
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override public var conversationID: Swift.String {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class CPOutboundMessage : CPMessagingModule.CPMessage {
  @objc public func addPart(text: CPMessagingModule.CPTextPart)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc public protocol CPSmsDelegate {
  @objc func inboundMessageReceived(message: CPMessagingModule.CPInboundMessage)
  @objc func deliveryStatusChanged(status: CPMessagingModule.CPMessageStatus)
  @objc func outboundMessageSent(message: CPMessagingModule.CPOutboundMessage)
}
public typealias FetchMessagesBlock = (CPUtilities.CPError?, [CPMessagingModule.CPMessage]) -> ()
public typealias FetchMessageBlock = (CPUtilities.CPError?, CPMessagingModule.CPMessage?) -> ()
public typealias SendCompletionBlock = (CPUtilities.CPError?, CPMessagingModule.CPOutboundMessage?) -> ()
@_hasMissingDesignatedInitializers @objc public class CPConversation : CPMessagingModule.FetchedObjects {
  @objc public var fromAddress: Swift.String {
    get
  }
  @objc public var participant: Swift.String {
    get
  }
  @objc public var lastText: Swift.String {
    get
  }
  @objc public var firstMessageTime: Foundation.Date {
    get
  }
  @objc public var lastMessageTime: Foundation.Date {
    get
  }
  @objc public var lastReceivedMessageTime: Foundation.Date {
    get
  }
  @objc public var lastPullTime: Foundation.Date {
    get
  }
  @objc public var length: Swift.Int {
    get
  }
  @objc public var resourceUrl: Swift.String {
    get
  }
  @objc public var url: Swift.String {
    @objc get
  }
  @objc public func fetchMessages(completion: @escaping CPMessagingModule.FetchBlock)
  @objc public func fetchMessages(fetchOptions: CPMessagingModule.FetchOptions, completion: @escaping CPMessagingModule.FetchBlock)
  @objc public func deleteMessage(withResourceUrl: Swift.String, completion: @escaping CPUtilities.DeleteCompletionBlock)
  @objc public func delete(completion: @escaping CPUtilities.DeleteCompletionBlock)
  @objc public func send(withText: Swift.String, _ completion: @escaping CPMessagingModule.SendCompletionBlock)
  @objc public func send(message: CPMessagingModule.CPMessage, _ completion: @escaping CPMessagingModule.SendCompletionBlock)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
extension CPMessagingModule.CPChatParticipantStatus : Swift.Equatable {}
extension CPMessagingModule.CPChatParticipantStatus : Swift.Hashable {}
