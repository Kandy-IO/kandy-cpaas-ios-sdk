// Generated by Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
#ifndef CPPRESENCEMODULE_SWIFT_H
#define CPPRESENCEMODULE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CPUtilities;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="CPPresenceModule",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

/// The possible values for PresenceActivity status.
typedef SWIFT_ENUM(NSInteger, CPPresenceActivities, open) {
/// Represents Unknown activity
  CPPresenceActivitiesActivitiesUnknown = 0,
/// Represents Other
  CPPresenceActivitiesActivitiesOther = 1,
/// Represents Available status of the user
  CPPresenceActivitiesAvailable = 2,
/// Represents Away status of the user
  CPPresenceActivitiesAway = 3,
/// Represents Busy status of the user
  CPPresenceActivitiesBusy = 4,
/// Represents Lunch status of the user
  CPPresenceActivitiesLunch = 5,
/// Represents on the phone status of the user
  CPPresenceActivitiesOnThePhone = 6,
/// Represents on vacation condition of the user
  CPPresenceActivitiesVacation = 7,
};

@class CPPresentityList;
@class CPPresentityListHandle;
@class CPPresentity;

/// Informs about the change on the Presence Activities
SWIFT_PROTOCOL("_TtP16CPPresenceModule18CPPresenceDelegate_")
@protocol CPPresenceDelegate
/// This method will be called when a PresentityList changes.
/// \param presentity The added Presentity object.
///
- (void)listChangedWithPresentityList:(CPPresentityList * _Nonnull)presentityList;
/// This method will be called when a subscription to a particular presentity list expires.
/// \param presentityListHandle Opaque handle identifying a presentity list.
///
- (void)subscriptionExpiredWithPresentityListHandle:(CPPresentityListHandle * _Nonnull)presentityListHandle;
/// This method will be called when the status of a Presentity changes.
/// \param presentityListHandle Opaque handle identifying a presentity list.
///
/// \param presentity The updated Presentity object.
///
- (void)statusChangedWithPresentity:(CPPresentity * _Nonnull)presentity;
@end

@class CPServiceInfo;
@class CPError;
@class PresenceActivity;
@class CPPresenceSource;

/// This class is used to manage presence services such as presence source publishing and presentity watching.
SWIFT_CLASS("_TtC16CPPresenceModule17CPPresenceService")
@interface CPPresenceService : NSObject <CPServiceProtocol>
/// An application that needs notifications should implement a PresenceDelegate compliant class and set this member as an instance of that class.
@property (nonatomic, strong) id <CPPresenceDelegate> _Nullable delegate;
/// A subscription to watch a PresentityList will expire. Use this member variable to specify a custom duration in seconds. The default value is 86400 seconds, one day.
@property (nonatomic) NSInteger subscriptionDuration;
/// Delegate method to get a serviceâ€™s information
///
/// returns:
/// service information object with service type and preferences.
- (CPServiceInfo * _Nonnull)serviceInfo SWIFT_WARN_UNUSED_RESULT;
/// Delegate method to get a list of notfications the service expects
///
/// returns:
/// list of notification names. These should match what is returned by subscribe() in completion callback.
- (NSArray<NSString *> * _Nonnull)notifications SWIFT_WARN_UNUSED_RESULT;
/// Delegate method to subscribe for notifications from a remote channel
/// \param channelID The channel on which to subscribe for notifications.
///
/// \param completion Code block to execute upon subscription completion.
///
- (void)subscribeWithChannelID:(NSString * _Nonnull)channelID completion:(void (^ _Nonnull)(NSString * _Nonnull, CPError * _Nullable))completion;
/// Delegate method to unsubscribe for notifications
/// \param channelID The channel from which to unsubscribe for notifications.
///
/// \param completion Code block to execute upon subscription completion.
///
- (void)unsubscribeWithChannelID:(NSString * _Nonnull)channelID completion:(void (^ _Nonnull)(CPError * _Nullable))completion;
/// Utility method for refreshing all PresentityList subscriptions that are near expiration.
/// Typically an application will want to refresh a subscription before it expires. If a
/// subscription will expire before the next period in which an application will attempt the
/// refresh action, use the interval of the period as the expiringInSeconds value. Alternately,
/// an application could periodically refresh any subscriptions that will expire within the
/// next day, in this case use expiringInSeconds value of (24 * 60 * 60.0)
/// \param expiringInSeconds Number of seconds within which the subscription will expire.
///
/// \param completion Code block to execute upon subscription refresh completion. The
/// completion block will be called for any subscription that is
/// refreshed. This means that it is possible that the completion block
/// will not be called in the case that no subscription is refereshed
///
- (void)refreshSubscriptionsWithExpiringInSeconds:(double)expiringInSeconds completion:(void (^ _Nonnull)(CPError * _Nullable))completion;
/// Create a presence source on the server.
/// \param activity Presence activity object representing the activity of the presentity
///
/// \param completion Code block to call after the create operation completes.
///
- (void)createPresenceSourceWithActivity:(PresenceActivity * _Nonnull)activity completion:(void (^ _Nonnull)(CPError * _Nullable, CPPresenceSource * _Nullable))completion;
/// Update a presence source on the server.
/// \param source Current presence source.
///
/// \param activity Presence activity object representing the activity of the presentity
///
/// \param completion Code block to call after the update operation completes.
///
- (void)updatePresenceSourceWithSource:(CPPresenceSource * _Nonnull)source activity:(PresenceActivity * _Nonnull)activity completion:(void (^ _Nonnull)(CPError * _Nullable, CPPresenceSource * _Nullable))completion;
/// Fetch presence source associated with the local client
/// \param completion Code block to execute upon fetch compeletion.
///
- (void)fetchPresenceSourceWithCompletion:(void (^ _Nonnull)(CPError * _Nullable, CPPresenceSource * _Nullable))completion;
/// Fetch presence source matching the passed in source
/// \param source Presence source to match against when fetching.
///
/// \param completion Code block to execute upon fetch compeletion.
///
- (void)fetchPresenceSourceWithSource:(CPPresenceSource * _Nonnull)source completion:(void (^ _Nonnull)(CPError * _Nullable, CPPresenceSource * _Nullable))completion;
/// Delete a presence source from the server.
/// \param source Presence source object representing the source to delete from the server.
///
/// \param completion Code block to execute upon delete completion.
///
- (void)deletePresenceSourceWithSource:(CPPresenceSource * _Nonnull)source completion:(void (^ _Nonnull)(CPError * _Nullable))completion;
/// Create a presentity list on the server.
/// \param name Presentity list name.
///
/// \param presentities Array of desired presentities to monitor.
///
/// \param completion Code block to call after the create operation completes.
///
- (void)createPresentityListWithName:(NSString * _Nonnull)name presentities:(NSArray<NSString *> * _Nonnull)presentities completion:(void (^ _Nonnull)(CPError * _Nullable, CPPresentityList * _Nullable))completion;
/// Fetch an array of all PresentityLists.
/// \param compeletion Code block to execute upon fetch compeletion.
///
- (void)fetchAllPresentityListsWithCompletion:(void (^ _Nonnull)(CPError * _Nullable, NSArray<CPPresentityList *> * _Nullable))completion;
/// Fetch PresentityList from backend that matches the passed in PresentityList.
/// \param presentityList PresentityList to match against when fetching.
///
/// \param compeletion Code block to execute upon fetch compeletion.
///
- (void)fetchPresentityListWithPresentityList:(CPPresentityList * _Nonnull)presentityList completion:(void (^ _Nonnull)(CPError * _Nullable, CPPresentityList * _Nullable))completion;
/// Delete PresentityList from backend that matches the passed in PresentityList.
/// \param presentityList PresentityList to match against when deleting.
///
/// \param compeletion Code block to execute upon delete compeletion.
///
- (void)deletePresentityListWithPresentityList:(CPPresentityList * _Nonnull)presentityList completion:(void (^ _Nonnull)(CPError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This class represents a presence source. A presence source represents the presence status of a particular client.
SWIFT_CLASS("_TtC16CPPresenceModule16CPPresenceSource")
@interface CPPresenceSource : NSObject
/// The presentity status details of this presence source.
@property (nonatomic, readonly, strong) PresenceActivity * _Null_unspecified activity;
/// The duration in seconds for which this source is active without refresh.
@property (nonatomic, readonly) NSInteger duration;
/// This method is used to update the presentity status details for this particular PresenceSource.
/// \param activity The updated PresenceActivity to apply to this presence source.
///
/// \param compeletion The code block to execute upon activity update completion.
///
- (void)updateActivityWithActivity:(PresenceActivity * _Nonnull)activity completion:(void (^ _Nonnull)(CPError * _Nullable, CPPresenceSource * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Presentity object. Manages userâ€™s presentity activity.
SWIFT_CLASS("_TtC16CPPresenceModule12CPPresentity")
@interface CPPresentity : NSObject
/// The userID of the presentity
@property (nonatomic, readonly, copy) NSString * _Null_unspecified userID;
/// The presentity status details.
@property (nonatomic, readonly, strong) PresenceActivity * _Null_unspecified activity;
/// Create a Presentity object having the specified userID.
- (nonnull instancetype)initWithUserID:(NSString * _Nonnull)userID OBJC_DESIGNATED_INITIALIZER;
/// Hash value of the Presentity Class
@property (nonatomic, readonly) NSUInteger hash;
/// Checks whether two presentity objects are for the same user.
/// \param object Should be <em>Presentity</em> object, otherwise returns false
///
///
/// returns:
/// True if they are same
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This class represents a list of watched presentities.
SWIFT_CLASS("_TtC16CPPresenceModule16CPPresentityList")
@interface CPPresentityList : NSObject
/// User defined name of the list.
@property (nonatomic, readonly, copy) NSString * _Null_unspecified name;
/// Set of presentities contained in the list.
@property (nonatomic, readonly, copy) NSSet<CPPresentity *> * _Nonnull presentities;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// This method fetches presentity status for all members of this list. Initial presentity list will only have userIDs.
/// \param completion The code block to execute upon fetch completion.
///
- (void)fetchStatusWithCompletion:(void (^ _Nonnull)(CPError * _Nullable, CPPresentityList * _Nullable))completion;
/// This method fetches presentity status for a specific member of this list. The results will be returned as a list via compeletion callback code block.
/// \param presentity The presentity to fetch status for.
///
/// \param completion The code block to execute upon fetch completion.
///
- (void)fetchStatusWithPresentity:(CPPresentity * _Nonnull)presentity completion:(void (^ _Nonnull)(CPError * _Nullable, CPPresentityList * _Nullable))completion;
/// This method is used to add a presentity to this presentity list.
/// \param presentity The presentity to add to this list.
///
/// \param completion The code block to execute upon completion of adding the list member.
///
- (void)addWithPresentity:(CPPresentity * _Nonnull)presentity completion:(void (^ _Nonnull)(CPError * _Nullable))completion;
/// This method is used to remove a presentity from this presentity list.
/// \param presentity The presentity to remove from this list.
///
/// \param completion The code block to execute upon completion of removing the list member.
///
- (void)removeWithPresentity:(CPPresentity * _Nonnull)presentity completion:(void (^ _Nonnull)(CPError * _Nullable))completion;
/// This method is used to subscribe for notifications of change to this presentity list and changes in status of members of this presentity list.
/// \param completion The code block to execute upon completion of the subscription action.
///
- (void)subscribeWithCompletion:(void (^ _Nonnull)(CPError * _Nullable))completion;
/// This method is used to update a member of a presentity list. This can be used when a notification arrives indicating either a new or updated member of the list.
/// \param presentity The presentity to update in this list.
///
- (void)statusChangedWithPresentity:(CPPresentity * _Nonnull)presentity;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This class provides an opaque handle to be used to compare against presentity lists
SWIFT_CLASS("_TtC16CPPresenceModule22CPPresentityListHandle")
@interface CPPresentityListHandle : NSObject
/// Checks whether two list handle objects are for the same user.
/// \param object Should be <em>PresentityListHandle</em> object, otherwise returns false
///
///
/// returns:
/// True if they are same
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This class represents presentity status details.
SWIFT_CLASS("_TtC16CPPresenceModule16PresenceActivity")
@interface PresenceActivity : NSObject
/// The state of the presentity.
@property (nonatomic, readonly) enum CPPresenceActivities state;
/// This member may contain an optional status text when the â€˜Otherâ€™ state is used.
@property (nonatomic, readonly, copy) NSString * _Nullable other;
/// This member represents a presentity willingness to engage in conversation.
@property (nonatomic, readonly) BOOL willing;
/// The text string value of the presentity status.
@property (nonatomic, readonly, copy) NSString * _Nonnull string;
/// Create presence status details object specifying the state.
- (nonnull instancetype)init:(enum CPPresenceActivities)state OBJC_DESIGNATED_INITIALIZER;
/// This helper method is used create a PresenceActivity object with custom status text and willingness.
/// \param activity Custom activty text to use for presentity status.
///
/// \param willing Indicates if the custom state represents a willingness to communicate or not.
///
+ (PresenceActivity * _Nonnull)makeOtherWithActivity:(NSString * _Nonnull)activity willing:(BOOL)willing SWIFT_WARN_UNUSED_RESULT;
/// This helper method is used create a PresenceActivity object with unspecified status text but specifying willingness to communicate.
/// \param willing Indicates if the user is willing to communicate or not.
///
+ (PresenceActivity * _Nonnull)makeUnknownWithWilling:(BOOL)willing SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
