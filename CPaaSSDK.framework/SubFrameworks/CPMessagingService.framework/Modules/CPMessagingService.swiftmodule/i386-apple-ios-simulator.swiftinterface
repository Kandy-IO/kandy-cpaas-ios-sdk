// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1.3 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
// swift-module-flags: -target i386-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name CPMessagingService
import CPUtilities
import Foundation
import MobileCoreServices
import NotificationEngine
import CPUtilities.Private
import RestManager
import Swift
public typealias ComposingCompletionBlock = (CPUtilities.CPError?, CPMessagingService.CPIsComposingMessage?) -> ()
@objc public class CPChatConversation : CPMessagingService.CPConversation {
  @objc override public var url: Swift.String {
    @objc get
  }
  @objc public var messagesUrl: Swift.String {
    @objc get
  }
  @objc public func send(withFile: Foundation.URL, progress: @escaping RestManager.UploadProgressBlock, completion: @escaping CPMessagingService.SendCompletionBlock) -> CPMessagingService.CPActivityHandle
  @objc public func send(text: Swift.String, withFile: Foundation.URL, progress: @escaping RestManager.UploadProgressBlock, completion: @escaping CPMessagingService.SendCompletionBlock) -> CPMessagingService.CPActivityHandle
  @objc public func composing(active: Swift.Bool, refresh: Swift.UInt, lastActive: Swift.UInt64, _ completion: @escaping CPMessagingService.ComposingCompletionBlock)
  @objc public func displayed(message: CPMessagingService.CPMessage, _ completion: @escaping CPUtilities.ErrorCompletionBlock)
  @objc override public func fetchMessages(completion: @escaping CPMessagingService.FetchBlock)
  @objc override public func fetchMessages(fetchOptions: CPMessagingService.FetchOptions, completion: @escaping CPMessagingService.FetchBlock)
  @objc override public func deleteMessage(withResourceUrl: Swift.String, completion: @escaping CPUtilities.DeleteCompletionBlock)
  @objc public func extend(name: Swift.String, type: Swift.String, subject: Swift.String? = nil, image: Foundation.URL? = nil, participants: [CPMessagingService.CPChatGroupParticipant], completion: @escaping CPMessagingService.CreateChatGroupBlock)
  @objc deinit
}
@objc public class CPChatGroupConversation : CPMessagingService.CPChatConversation {
  @objc override public var url: Swift.String {
    @objc get
  }
  @objc override public var messagesUrl: Swift.String {
    @objc get
  }
  @objc override public func displayed(message: CPMessagingService.CPMessage, _ completion: @escaping CPUtilities.ErrorCompletionBlock)
  @objc deinit
}
@objc public enum CPChatParticipantStatus : Swift.Int, Swift.RawRepresentable {
  public typealias RawValue = Swift.String
  case Unknown
  case Invited
  case Connected
  case Disconnected
  public var rawValue: CPMessagingService.CPChatParticipantStatus.RawValue {
    get
  }
  public init(rawValue: CPMessagingService.CPChatParticipantStatus.RawValue)
}
@objc public class CPChatGroupParticipant : ObjectiveC.NSObject {
  @objc final public let address: Swift.String!
  @objc public var status: CPMessagingService.CPChatParticipantStatus {
    get
    }
  @objc final public let admin: Swift.Bool
  @objc public init(address: Swift.String, admin: Swift.Bool = false)
  @objc public var groupID: Swift.String? {
    @objc get
  }
  @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
public typealias CreateChatGroupBlock = (CPUtilities.CPError?, CPMessagingService.CPChatGroup?) -> ()
public typealias FetchAllChatGroupsBlock = (CPUtilities.CPError?, [CPMessagingService.CPChatGroup]?) -> ()
public typealias FetchChatGroupBlock = (CPUtilities.CPError?, CPMessagingService.CPChatGroup?) -> ()
@objc public class CPChatGroup : ObjectiveC.NSObject {
  @objc public var groupID: Swift.String? {
    get
    }
  @objc final public let name: Swift.String!
  @objc final public let type: Swift.String!
  @objc public var image: Foundation.URL?
  @objc public var subject: Swift.String?
  @objc public var participants: Swift.Set<CPMessagingService.CPChatGroupParticipant>
  @objc public var status: CPMessagingService.CPChatParticipantStatus {
    @objc get
  }
  @objc public var isAdmin: Swift.Bool {
    @objc get
  }
  @objc public func add(participant: CPMessagingService.CPChatGroupParticipant, completion: @escaping CPUtilities.ErrorCompletionBlock)
  @objc public func remove(participant: CPMessagingService.CPChatGroupParticipant, completion: @escaping CPUtilities.ErrorCompletionBlock)
  @objc public func accept(completion: @escaping CPUtilities.ErrorCompletionBlock)
  @objc public func decline(completion: @escaping CPUtilities.ErrorCompletionBlock)
  @objc public func leave(completion: @escaping CPUtilities.ErrorCompletionBlock)
  @objc public func updateWith(participant: CPMessagingService.CPChatGroupParticipant)
  @objc override dynamic public init()
  @objc deinit
}
@objc public class CPChatGroupInvitation : ObjectiveC.NSObject {
  @objc final public let group: CPMessagingService.CPChatGroup!
  @objc public func accept(completion: @escaping CPUtilities.ErrorCompletionBlock)
  @objc public func decline(completion: @escaping CPUtilities.ErrorCompletionBlock)
  @objc override dynamic public init()
  @objc deinit
}
public typealias FetchBlock = (CPUtilities.CPError?, CPMessagingService.FetchResult?) -> ()
@objc public class FetchOptions : ObjectiveC.NSObject {
  @objc public var max: Swift.Int
  @objc public var next: Swift.String
  @objc public var lastMessageTime: Swift.CLongLong
  public var isNew: Swift.Bool?
  @objc override dynamic public init()
  @objc deinit
}
@objc public class FetchCriteria : ObjectiveC.NSObject {
  @objc public var localAddress: Swift.String?
  @objc public var participant: Swift.String?
  @objc public var fetchOptions: CPMessagingService.FetchOptions?
  @objc override dynamic public init()
  @objc deinit
}
@objc public class FetchedObjects : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc public class FetchResult : ObjectiveC.NSObject {
  @objc public var hasNext: Swift.Bool
  @objc public var result: [CPMessagingService.FetchedObjects]?
  @objc public func getNext(completion: @escaping CPMessagingService.FetchBlock)
  @objc override dynamic public init()
  @objc deinit
}
@objc public class MessageService : ObjectiveC.NSObject {
  @objc public var fromUser: Swift.String {
    @objc get
  }
  @objc public func getUserInfo() -> CPUtilities.CPUserInfo
  @objc public func setSender(name: Swift.String)
  @objc public func fetchConversations(completion: @escaping CPMessagingService.FetchBlock)
  @objc public func fetchConversations(withFetchCriteria: CPMessagingService.FetchCriteria, completion: @escaping CPMessagingService.FetchBlock)
  @objc public func createMessage(withText: Swift.String) -> CPMessagingService.CPOutboundMessage
  @objc override dynamic public init()
  @objc deinit
}
@objc public class CPIsComposingMessage : ObjectiveC.NSObject {
  @objc public var sender: Swift.String {
    get
    }
  @objc public var destination: Swift.String {
    get
    }
  @objc public var conversationType: Swift.String
  @objc public var active: Swift.Bool {
    get
    }
  @objc public var lastActiveTime: Foundation.Date {
    get
    }
  @objc public var refresh: Swift.UInt {
    get
    }
  @objc public var direction: Swift.String {
    get
    }
  @objc public var conversationID: Swift.String {
    @objc get
  }
  @objc deinit
}
public typealias UploadCompletionBlock = (CPUtilities.CPError?, CPMessagingService.CPFilePart?) -> ()
public typealias DownloadCompletionBlock = (CPUtilities.CPError?, Foundation.URL?) -> ()
@objc public class CPActivityHandle : ObjectiveC.NSObject {
  @objc public func cancel()
  @objc override dynamic public init()
  @objc deinit
}
@objc public class CPChatService : CPMessagingService.MessageService, CPUtilities.CPServiceProtocol {
  @objc public var delegate: CPMessagingService.CPChatDelegate?
  public init(userInfo: CPUtilities.CPUserInfo, info: CPUtilities.CPServiceInfo)
  @objc public func createConversation(withParticipant: Swift.String) -> CPMessagingService.CPConversation?
  @objc public func createConversation(withGroup: CPMessagingService.CPChatGroup) -> CPMessagingService.CPConversation?
  @objc public func upload(withFile: Foundation.URL, progress: @escaping RestManager.UploadProgressBlock, completion: @escaping CPMessagingService.UploadCompletionBlock) -> CPMessagingService.CPActivityHandle
  @objc public func mimeTypeFor(file: Foundation.URL) -> Swift.String
  @objc public func download(fromUrl: Foundation.URL, toFile: Foundation.URL, progress: @escaping RestManager.DownloadProgressBlock, completion: @escaping CPMessagingService.DownloadCompletionBlock) -> CPMessagingService.CPActivityHandle
  @objc public func fetchGroupConversations(completion: @escaping CPMessagingService.FetchBlock)
  @objc public func fetchOneToOneConversations(completion: @escaping CPMessagingService.FetchBlock)
  @objc public func fetchConversation(withGroupID: Swift.String, completion: @escaping CPMessagingService.FetchBlock)
  @objc public func fetchConversation(withParticipant: Swift.String, completion: @escaping CPMessagingService.FetchBlock)
  @objc override public func delete(conversation: CPMessagingService.CPConversation, completion: @escaping CPUtilities.DeleteCompletionBlock)
  @objc public func serviceInfo() -> CPUtilities.CPServiceInfo
  @objc public func notifications() -> [Swift.String]
  @objc public func subscribe(channelID: Swift.String, completion: @escaping CPUtilities.SubscribeCompletion)
  @objc public func unsubscribe(channelID: Swift.String, completion: @escaping CPUtilities.UnsubscribeCompletion)
  @objc public func createChatGroup(name: Swift.String, type: Swift.String, subject: Swift.String? = nil, image: Foundation.URL? = nil, participants: [CPMessagingService.CPChatGroupParticipant], completion: @escaping CPMessagingService.CreateChatGroupBlock)
  @objc public func updateChatGroupProperties(groupID: Swift.String, name: Swift.String, subject: Swift.String? = nil, image: Swift.String? = nil, _ completion: @escaping CPUtilities.ErrorCompletionBlock)
  @objc public func deleteChatGroup(groupID: Swift.String, _ completion: @escaping CPUtilities.DeleteCompletionBlock)
  @objc public func fetchAllChatGroups(completion: @escaping CPMessagingService.FetchAllChatGroupsBlock)
  @objc public func fetchChatGroup(withKey: Swift.String, completion: @escaping CPMessagingService.FetchChatGroupBlock)
  @objc public func changeGroupAdminRole(status: Swift.Bool, groupID: Swift.String, forParticipant: Swift.String, _ completion: @escaping CPUtilities.ErrorCompletionBlock)
  @objc deinit
}
@objc public protocol CPChatDelegate {
  @objc func inboundMessageReceived(message: CPMessagingService.CPInboundMessage)
  @objc func deliveryStatusChanged(status: CPMessagingService.CPMessageStatus)
  @objc func outboundMessageSent(message: CPMessagingService.CPOutboundMessage)
  @objc func isComposing(message: CPMessagingService.CPIsComposingMessage)
  @objc func groupInvitationReceived(invitation: CPMessagingService.CPChatGroupInvitation)
  @objc func groupParticipantStatus(participants: [CPMessagingService.CPChatGroupParticipant])
  @objc func groupChatEnded(groupID: Swift.String)
}
@objc public class CPSmsService : CPMessagingService.MessageService, CPUtilities.CPServiceProtocol {
  @objc public var localAddressList: [Swift.String] {
    get
    }
  @objc public var delegate: CPMessagingService.CPSmsDelegate?
  @objc public var uriFormat: CPMessagingService.CPUriFormat
  public init(userInfo: CPUtilities.CPUserInfo, info: CPUtilities.CPServiceInfo)
  @objc public func createConversation(fromAddress: Swift.String, withParticipant: Swift.String) -> CPMessagingService.CPConversation?
  @objc override public func fetchConversations(withFetchCriteria: CPMessagingService.FetchCriteria, completion: @escaping CPMessagingService.FetchBlock)
  @objc public func serviceInfo() -> CPUtilities.CPServiceInfo
  @objc public func notifications() -> [Swift.String]
  @objc public func subscribe(channelID: Swift.String, completion: @escaping CPUtilities.SubscribeCompletion)
  @objc public func unsubscribe(channelID: Swift.String, completion: @escaping CPUtilities.UnsubscribeCompletion)
  @objc deinit
}
@objc public class CPMessagePart : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc public class CPTextPart : CPMessagingService.CPMessagePart {
  @objc public var text: Swift.String {
    get
    }
  @objc public init(withText: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@objc public class CPThumbnailPart : ObjectiveC.NSObject {
  @objc public var contentType: Swift.String {
    get
    }
  @objc public var link: Swift.String {
    get
    }
  @objc override dynamic public init()
  @objc deinit
}
@objc public class CPFilePart : CPMessagingService.CPMessagePart {
  @objc public var link: Swift.String {
    get
    }
  @objc public var contentType: Swift.String {
    get
    }
  @objc public var id: Swift.String {
    get
    }
  @objc public var size: Swift.Int {
    get
    }
  @objc public var name: Swift.String {
    get
    }
  @objc public var thumbnail: CPMessagingService.CPThumbnailPart? {
    get
    }
  @objc public init(name: Swift.String, link: Swift.String, size: Swift.Int)
  @objc override dynamic public init()
  @objc deinit
}
@objc public class CPMessageStatus : ObjectiveC.NSObject {
  @objc final public let status: Swift.String
  @objc public var participant: Swift.String {
    get
    }
  @objc public var conversationType: Swift.String
  @objc public var messageId: Swift.String {
    get
    }
  @objc final public let sender: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc public class CPMessage : CPMessagingService.FetchedObjects {
  @objc public var messageId: Swift.String {
    get
    }
  @objc public var timestamp: Foundation.Date {
    get
    }
  @objc public var sender: Swift.String {
    get
    }
  @objc public var destination: Swift.String {
    get
    }
  @objc public var status: Swift.String {
    get
    }
  @objc public var conversationType: Swift.String {
    get
    }
  @objc public var groupStatus: [Swift.String : Swift.String]? {
    get
    }
  @objc public var resourceUrl: Swift.String {
    get
    }
  @objc public var parts: [CPMessagingService.CPMessagePart] {
    get
    }
  @objc public var text: Swift.String {
    @objc get
  }
  @objc public func update(withStatus: CPMessagingService.CPMessageStatus)
  @objc public var files: [CPMessagingService.CPFilePart] {
    @objc get
  }
  @objc public var conversationID: Swift.String {
    @objc get
  }
  @objc public func addPart(file: CPMessagingService.CPFilePart)
  @objc override dynamic public init()
  @objc deinit
}
@objc public class CPInboundMessage : CPMessagingService.CPMessage {
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override public var conversationID: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc public class CPOutboundMessage : CPMessagingService.CPMessage {
  @objc public func addPart(text: CPMessagingService.CPTextPart)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc public protocol CPSmsDelegate {
  @objc func inboundMessageReceived(message: CPMessagingService.CPInboundMessage)
  @objc func deliveryStatusChanged(status: CPMessagingService.CPMessageStatus)
  @objc func outboundMessageSent(message: CPMessagingService.CPOutboundMessage)
}
public typealias FetchMessagesBlock = (CPUtilities.CPError?, [CPMessagingService.CPMessage]) -> ()
public typealias FetchMessageBlock = (CPUtilities.CPError?, CPMessagingService.CPMessage?) -> ()
public typealias SendCompletionBlock = (CPUtilities.CPError?, CPMessagingService.CPOutboundMessage?) -> ()
@objc public class CPConversation : CPMessagingService.FetchedObjects {
  @objc public var fromAddress: Swift.String {
    get
    }
  @objc public var participant: Swift.String {
    get
    }
  @objc public var lastText: Swift.String {
    get
    }
  @objc public var firstMessageTime: Foundation.Date {
    get
    }
  @objc public var lastMessageTime: Foundation.Date {
    get
    }
  @objc public var lastReceivedMessageTime: Foundation.Date {
    get
    }
  @objc public var lastPullTime: Foundation.Date {
    get
    }
  @objc public var length: Swift.Int {
    get
    }
  @objc public var resourceUrl: Swift.String {
    get
    }
  @objc public var url: Swift.String {
    @objc get
  }
  @objc public func fetchMessages(completion: @escaping CPMessagingService.FetchBlock)
  @objc public func fetchMessages(fetchOptions: CPMessagingService.FetchOptions, completion: @escaping CPMessagingService.FetchBlock)
  @objc public func deleteMessage(withResourceUrl: Swift.String, completion: @escaping CPUtilities.DeleteCompletionBlock)
  @objc public func delete(completion: @escaping CPUtilities.DeleteCompletionBlock)
  @objc public func send(withText: Swift.String, _ completion: @escaping CPMessagingService.SendCompletionBlock)
  @objc public func send(message: CPMessagingService.CPMessage, _ completion: @escaping CPMessagingService.SendCompletionBlock)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum CPUriFormat : Swift.Int {
  case none = 0
  case sip
  case tel
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension CPMessagingService.CPChatParticipantStatus : Swift.Equatable {}
extension CPMessagingService.CPChatParticipantStatus : Swift.Hashable {}
extension CPMessagingService.CPUriFormat : Swift.Hashable {}
extension CPMessagingService.CPUriFormat : Swift.RawRepresentable {}
